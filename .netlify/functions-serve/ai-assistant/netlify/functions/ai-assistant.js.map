{
  "version": 3,
  "sources": ["../../../../../../Users/samlazrak/Development/RatGarden/netlify/functions/ai-assistant.ts"],
  "sourceRoot": "/var/folders/n9/6y8rmmyx34sb156z9jsxst9w0000gn/T/tmp-92320-0854HavxsxPH",
  "sourcesContent": ["// Netlify function types\ninterface HandlerEvent {\n  httpMethod: string\n  body: string | null\n  path: string\n}\n\ninterface HandlerContext {\n  // Add any context properties as needed\n}\n\ninterface HandlerResponse {\n  statusCode: number\n  body?: string\n  headers?: Record<string, string>\n}\n\ntype Handler = (\n  event: HandlerEvent,\n  context: HandlerContext,\n) => Promise<HandlerResponse> | HandlerResponse\n\ninterface AIRequest {\n  text: string\n  feature: \"grammar\" | \"style\" | \"suggestions\" | \"completion\" | \"summarize\"\n  provider?: \"gemini\" | \"openai\" | \"anthropic\"\n  context?: string\n}\n\ninterface AIResponse {\n  corrections?: Array<{\n    text: string\n    replacement: string\n    reason: string\n    type: string\n  }>\n  suggestions?: string[]\n  completion?: string\n  summary?: string\n  key_points?: string[]\n  score?: {\n    grammar: number\n    clarity: number\n    engagement: number\n  }\n  error?: string\n  raw_response?: string\n  feature?: string\n}\n\ninterface GeminiResponse {\n  candidates?: Array<{\n    content: {\n      parts: Array<{\n        text: string\n      }>\n    }\n  }>\n}\n\ninterface OpenAIResponse {\n  choices: Array<{\n    message: {\n      content: string\n    }\n  }>\n}\n\ninterface AnthropicResponse {\n  content: Array<{\n    text: string\n  }>\n}\n\nconst OPENAI_API_KEY = process.env.OPENAI_API_KEY\nconst ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY\nconst GEMINI_API_KEY = process.env.GEMINI_API_KEY\n\nexport const handler: Handler = async (event: HandlerEvent, context: HandlerContext) => {\n  // CORS headers\n  if (event.httpMethod === \"OPTIONS\") {\n    return {\n      statusCode: 200,\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",\n        \"Access-Control-Allow-Headers\": \"Content-Type\",\n      },\n    }\n  }\n\n  if (event.httpMethod !== \"POST\") {\n    return {\n      statusCode: 405,\n      body: JSON.stringify({ error: \"Method not allowed\" }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    }\n  }\n\n  // Check if at least one API key is configured\n  if (!OPENAI_API_KEY && !ANTHROPIC_API_KEY && !GEMINI_API_KEY) {\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ error: \"No API keys configured\" }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    }\n  }\n\n  try {\n    const {\n      text,\n      feature,\n      provider = \"gemini\",\n      context,\n    }: AIRequest = JSON.parse(event.body || \"{}\")\n\n    // Determine which provider to use based on available API keys\n    let selectedProvider = provider\n    if (provider === \"gemini\" && !GEMINI_API_KEY) {\n      if (OPENAI_API_KEY) selectedProvider = \"openai\"\n      else if (ANTHROPIC_API_KEY) selectedProvider = \"anthropic\"\n      else {\n        return {\n          statusCode: 500,\n          body: JSON.stringify({ error: \"No API keys configured\" }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\",\n          },\n        }\n      }\n    } else if (provider === \"openai\" && !OPENAI_API_KEY) {\n      if (GEMINI_API_KEY) selectedProvider = \"gemini\"\n      else if (ANTHROPIC_API_KEY) selectedProvider = \"anthropic\"\n      else {\n        return {\n          statusCode: 500,\n          body: JSON.stringify({ error: \"OpenAI API key not configured\" }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\",\n          },\n        }\n      }\n    } else if (provider === \"anthropic\" && !ANTHROPIC_API_KEY) {\n      if (GEMINI_API_KEY) selectedProvider = \"gemini\"\n      else if (OPENAI_API_KEY) selectedProvider = \"openai\"\n      else {\n        return {\n          statusCode: 500,\n          body: JSON.stringify({ error: \"Anthropic API key not configured\" }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\",\n          },\n        }\n      }\n    }\n\n    let aiResponse: AIResponse\n\n    switch (selectedProvider) {\n      case \"gemini\":\n        aiResponse = await callGeminiAPI(text, feature, context)\n        break\n      case \"openai\":\n        aiResponse = await callOpenAIAPI(text, feature)\n        break\n      case \"anthropic\":\n        aiResponse = await callAnthropicAPI(text, feature, context)\n        break\n      default:\n        return {\n          statusCode: 400,\n          body: JSON.stringify({ error: \"Unsupported provider\" }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\",\n          },\n        }\n    }\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify(aiResponse),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    }\n  } catch (error) {\n    console.error(\"AI Assistant error:\", error)\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ error: \"Failed to process request\" }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    }\n  }\n}\n\n// Helper functions for each API provider\nasync function callGeminiAPI(\n  text: string,\n  feature: string,\n  context: string = \"\",\n): Promise<AIResponse> {\n  const maxTokens = getMaxTokensForFeature(feature)\n  const model = getOptimalGeminiModel(feature, text.length)\n\n  let systemPrompt = getSystemPrompt(feature)\n  let userPrompt = buildUserPrompt(text, feature, context)\n\n  const response = await fetch(\n    `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${GEMINI_API_KEY}`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        contents: [\n          {\n            role: \"user\",\n            parts: [\n              {\n                text: `${systemPrompt}\\n\\n${userPrompt}`,\n              },\n            ],\n          },\n        ],\n        generationConfig: {\n          temperature: 0.1,\n          maxOutputTokens: maxTokens,\n          topP: 0.8,\n          topK: 40,\n        },\n      }),\n    },\n  )\n\n  if (!response.ok) {\n    throw new Error(`Gemini API error: ${response.status}`)\n  }\n\n  const data: GeminiResponse = await response.json()\n\n  if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {\n    throw new Error(\"Invalid response from Gemini API\")\n  }\n\n  return parseResponse(data.candidates[0].content.parts[0].text, feature)\n}\n\nasync function callOpenAIAPI(text: string, feature: string): Promise<AIResponse> {\n  let prompt = \"\"\n  let model = \"gpt-3.5-turbo\" // Use cheaper model for cost efficiency\n\n  switch (feature) {\n    case \"grammar\":\n      prompt = `Check the following text for grammar and spelling errors. Provide corrections in this JSON format:\n{\n  \"corrections\": [{\"text\": \"error\", \"replacement\": \"correction\", \"reason\": \"explanation\", \"type\": \"grammar\"}],\n  \"suggestions\": [\"general improvement suggestions\"],\n  \"score\": {\"grammar\": 85, \"clarity\": 90, \"engagement\": 80}\n}\n\nText: ${text}`\n      break\n\n    case \"style\":\n      prompt = `Analyze the writing style of this text and suggest improvements. Format response as JSON:\n{\n  \"corrections\": [{\"text\": \"weak phrase\", \"replacement\": \"stronger phrase\", \"reason\": \"explanation\", \"type\": \"style\"}],\n  \"suggestions\": [\"style improvement suggestions\"],\n  \"score\": {\"grammar\": 85, \"clarity\": 90, \"engagement\": 80}\n}\n\nText: ${text}`\n      break\n\n    case \"suggestions\":\n      prompt = `Provide content suggestions for this text. Format as JSON:\n{\n  \"suggestions\": [\"suggestion 1\", \"suggestion 2\", \"suggestion 3\"]\n}\n\nText: ${text}`\n      break\n\n    case \"completion\":\n      prompt = `Continue this text naturally. Return JSON:\n{\n  \"completion\": \"your continuation here\"\n}\n\nText: ${text}`\n      break\n\n    default:\n      prompt = `Analyze this text and provide feedback. Format as JSON with corrections, suggestions, and scores.\n\nText: ${text}`\n  }\n\n  const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${OPENAI_API_KEY}`,\n    },\n    body: JSON.stringify({\n      model,\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a helpful writing assistant. Always respond with valid JSON.\",\n        },\n        {\n          role: \"user\",\n          content: prompt,\n        },\n      ],\n      temperature: 0.3,\n      max_tokens: 500,\n    }),\n  })\n\n  if (!response.ok) {\n    throw new Error(`OpenAI API error: ${response.status}`)\n  }\n\n  const data: OpenAIResponse = await response.json()\n  return JSON.parse(data.choices[0].message.content)\n}\n\nasync function callAnthropicAPI(\n  text: string,\n  feature: string,\n  context: string = \"\",\n): Promise<AIResponse> {\n  const maxTokens = getMaxTokensForFeature(feature)\n  const model = getOptimalAnthropicModel(feature, text.length)\n\n  let systemPrompt = getSystemPrompt(feature)\n  let userPrompt = buildUserPrompt(text, feature, context)\n\n  const response = await fetch(\"https://api.anthropic.com/v1/messages\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": ANTHROPIC_API_KEY!,\n      \"anthropic-version\": \"2023-06-01\",\n    },\n    body: JSON.stringify({\n      model,\n      max_tokens: maxTokens,\n      temperature: 0.1, // Low temperature for consistent results\n      system: systemPrompt,\n      messages: [\n        {\n          role: \"user\",\n          content: userPrompt,\n        },\n      ],\n    }),\n  })\n\n  if (!response.ok) {\n    throw new Error(`Anthropic API error: ${response.status}`)\n  }\n\n  const data: AnthropicResponse = await response.json()\n  return parseResponse(data.content[0].text, feature)\n}\n\n// Utility functions\nfunction getMaxTokensForFeature(feature: string): number {\n  const tokenLimits: Record<string, number> = {\n    grammar: 300,\n    style: 400,\n    suggestions: 200,\n    completion: 500,\n    summarize: 300,\n    medical: 600, // Higher for medical content validation\n  }\n  return tokenLimits[feature] || 300\n}\n\nfunction getOptimalGeminiModel(feature: string, textLength: number): string {\n  // Use Gemini 1.5 Flash for simple tasks, Gemini 1.5 Pro for complex ones\n  if (feature === \"medical\" || textLength > 2000) {\n    return \"gemini-1.5-pro\"\n  }\n  return \"gemini-1.5-flash\" // Most cost-effective for simple tasks\n}\n\nfunction getOptimalAnthropicModel(feature: string, textLength: number): string {\n  // Use Haiku for simple tasks, Sonnet for complex ones, Opus for medical\n  if (feature === \"medical\") return \"claude-3-5-sonnet-20241022\"\n  if (textLength > 2000) return \"claude-3-5-sonnet-20241022\"\n  return \"claude-3-5-haiku-20241022\" // Most cost-effective for simple tasks\n}\n\nfunction getSystemPrompt(feature: string): string {\n  const prompts: Record<string, string> = {\n    grammar: `You are a grammar and spelling expert. Provide corrections in JSON format with minimal tokens. Focus only on actual errors.`,\n    style: `You are a writing style expert. Provide style improvements in JSON format. Be concise and actionable.`,\n    suggestions: `You are a content strategist. Provide brief, actionable suggestions in JSON format.`,\n    completion: `You are a writing assistant. Continue the text naturally and concisely. Return JSON with completion.`,\n    summarize: `You are a summarization expert. Create concise summaries in JSON format.`,\n    medical: `You are a medical content validator. Check for accuracy, HIPAA compliance, and evidence-based claims. Return detailed analysis in JSON.`,\n  }\n  return prompts[feature] || prompts.grammar\n}\n\nfunction buildUserPrompt(text: string, feature: string, context: string = \"\"): string {\n  let prompt = \"\"\n\n  switch (feature) {\n    case \"grammar\":\n      prompt = `Check the following text for grammar and spelling errors. Provide corrections in this JSON format:\n{\n  \"corrections\": [{\"text\": \"error\", \"replacement\": \"correction\", \"reason\": \"explanation\", \"type\": \"grammar\"}],\n  \"suggestions\": [\"general improvement suggestions\"],\n  \"score\": {\"grammar\": 85, \"clarity\": 90, \"engagement\": 80}\n}\n\nText: ${text}`\n      break\n\n    case \"style\":\n      prompt = `Analyze the writing style of this text and suggest improvements. Format response as JSON:\n{\n  \"corrections\": [{\"text\": \"weak phrase\", \"replacement\": \"stronger phrase\", \"reason\": \"explanation\", \"type\": \"style\"}],\n  \"suggestions\": [\"style improvement suggestions\"],\n  \"score\": {\"grammar\": 85, \"clarity\": 90, \"engagement\": 80}\n}\n\nText: ${text}`\n      break\n\n    case \"suggestions\":\n      prompt = `Provide content suggestions for this text. Format as JSON:\n{\n  \"suggestions\": [\"suggestion 1\", \"suggestion 2\", \"suggestion 3\"]\n}\n\nText: ${text}`\n      break\n\n    case \"completion\":\n      prompt = `Continue this text naturally. Return JSON:\n{\n  \"completion\": \"your continuation here\"\n}\n\nText: ${text}`\n      break\n\n    case \"summarize\":\n      prompt = `Summarize this text concisely. Return JSON:\n{\n  \"summary\": \"your summary here\",\n  \"key_points\": [\"point 1\", \"point 2\", \"point 3\"]\n}\n\nText: ${text}`\n      break\n\n    default:\n      prompt = `Analyze this text and provide feedback. Format as JSON with corrections, suggestions, and scores.\n\nText: ${text}`\n  }\n\n  if (context) {\n    prompt = `${prompt}\\n\\nContext: ${context}`\n  }\n\n  return prompt\n}\n\nfunction parseResponse(responseText: string, feature: string): AIResponse {\n  try {\n    // Try to parse as JSON first\n    return JSON.parse(responseText)\n  } catch (error) {\n    // Fallback to structured response\n    return {\n      error: \"Invalid JSON response\",\n      raw_response: responseText,\n      feature,\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["context"]
}
