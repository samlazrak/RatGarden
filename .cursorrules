# Cursor Rules for RatGarden

## Project Context

This is a Quartz 4 static site generator for "The Rat's Garden" digital garden. The project uses TypeScript, Preact, SCSS, and Markdown content.

## Code Style & Standards

- Use TypeScript with strict type checking for ALL new code
- Use Preact instead of React for all components
- Follow existing code patterns and file organization
- Use SCSS for styling with CSS custom properties
- Implement proper error boundaries and loading states
- Write comprehensive unit tests for all new code
- **NEVER create JavaScript files - always use TypeScript (.ts/.tsx)**
- Convert any existing JavaScript files to TypeScript when modifying them

## File Organization

- Components: `quartz/components/` with styles in `quartz/components/styles/`
- Scripts: `quartz/components/scripts/` for inline scripts
- Content: `content/` directory with appropriate subdirectories
- Tests: `tests/` directory or alongside components
- Documentation: `docs/` directory for project documentation
- Utility Scripts: `scripts/` directory for build and maintenance scripts
- **CLAUDE.md must remain in the root directory** - do not move it to docs/

## Development Workflow

- Always run `npm run dev` for development
- Use `npm run test` to run tests
- Use `npm run check` for type checking and formatting
- Follow TDD methodology - write tests first
- **Shell**: Use direct terminal commands unless specifically asked to use runner.sh
- **Runner.sh**: Only use `./runner.sh <command>` when explicitly requested by user

## Key Technologies

- Node.js v22+, npm v10.9.2+
- TypeScript with JSX (Preact)
- SCSS with CSS custom properties
- Markdown with frontmatter
- Custom build system with esbuild

## Important Notes

- Site uses Preact for smaller bundle size
- Graph link generation runs before each build
- Hot reload via WebSocket connections
- Deployed at garden.samlazrak.com

## Repository Management

- **Private Repository**: Contains all content, build artifacts, and development files
- **Public Repository**: Source code only - no content, no build artifacts, no private files
- **Excluded from Public**: content/, public/, scripts/, docs/, tests/, .claude/, .vscode/, .github/, .quartz-cache/, runner.sh, runneroutput.log, CLAUDE.md, .cursorrules, vercel.json, system files, generic Quartz documentation
- **Git LFS**: Large files (videos, images, JSON) are handled by Git LFS for faster pushes

## Git Operations - STRICT RULES

- **NEVER make git commits automatically** - only suggest commits to the user
- **NEVER push code automatically** - only suggest pushes to the user
- **NEVER run git commands without explicit user approval**
- **NEVER use sanitization scripts without user approval**
- **ALWAYS ask for permission before any git operations**
- **ONLY suggest changes and let the user execute them manually**
- **If git operations are needed, provide the exact commands for the user to run**

## Testing Requirements

- Write unit tests first (TDD)
- Include comprehensive error handling
- Validate all user inputs
- Mock external dependencies
- Test happy paths, edge cases, and error conditions

## Linter Error Handling

- **Maximum 3 attempts** to fix linter errors on the same file
- If linter errors persist after 3 attempts, stop and ask the user for guidance
- Do not make uneducated guesses about linter error fixes
- Focus on clear, obvious fixes rather than complex type system changes
- When hitting the limit, provide a summary of the remaining issues to the user
